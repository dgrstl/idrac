components:
  schemas:
    Actions:
      additionalProperties: false
      properties:
        '#Volume.CheckConsistency':
          $ref: '#/components/schemas/CheckConsistency'
        '#Volume.Initialize':
          $ref: '#/components/schemas/Initialize'
        Oem:
          $ref: '#/components/schemas/OemActions'
      type: object
      x-patternProperties:
        ^([a-zA-Z_][a-zA-Z0-9_]*)?@(odata|Redfish|Message)\.[a-zA-Z_][a-zA-Z0-9_.]+$:
          description: This property shall specify a valid odata or Redfish property.
    CheckConsistency:
      additionalProperties: false
      description: This action is used to force a check of the Volume's parity or
        redundant data to ensure it matches calculated values.
      properties:
        target:
          description: Link to invoke action
          format: uri
          type: string
        title:
          description: Friendly action name
          type: string
      type: object
      x-longDescription: This defines the name of the custom action supported on this
        resource.
      x-patternProperties:
        ^([a-zA-Z_][a-zA-Z0-9_]*)?@(odata|Redfish|Message)\.[a-zA-Z_][a-zA-Z0-9_.]+$:
          description: This property shall specify a valid odata or Redfish property.
    CheckConsistencyRequestBody:
      additionalProperties: false
      description: This action is used to force a check of the Volume's parity or
        redundant data to ensure it matches calculated values.
      properties: {}
      type: object
      x-longDescription: This defines the name of the custom action supported on this
        resource.
    EncryptionTypes:
      enum:
      - NativeDriveEncryption
      - ControllerAssisted
      - SoftwareAssisted
      type: string
      x-enumDescriptions:
        ControllerAssisted: The volume is being encrypted by the storage controller
          entity.
        NativeDriveEncryption: The volume is utilizing the native drive encryption
          capabilities of the drive hardware.
        SoftwareAssisted: The volume is being encrypted by software running on the
          system or the operating system.
    Initialize:
      additionalProperties: false
      description: This action is used to prepare the contents of the volume for use
        by the system. If InitializeType is not specified in the request body, the
        InitializeType should be Fast.
      properties:
        target:
          description: Link to invoke action
          format: uri
          type: string
        title:
          description: Friendly action name
          type: string
      type: object
      x-longDescription: This defines the name of the custom action supported on this
        resource. If InitializeType is not specified in the request body, the InitializeType
        should be Fast.
      x-patternProperties:
        ^([a-zA-Z_][a-zA-Z0-9_]*)?@(odata|Redfish|Message)\.[a-zA-Z_][a-zA-Z0-9_.]+$:
          description: This property shall specify a valid odata or Redfish property.
    InitializeRequestBody:
      additionalProperties: false
      description: This action is used to prepare the contents of the volume for use
        by the system. If InitializeType is not specified in the request body, the
        InitializeType should be Fast.
      properties:
        InitializeType:
          $ref: http://redfish.dmtf.org/schemas/swordfish/v1/Volume.yaml#/components/schemas/InitializeType
          description: The type of initialization to be performed.
          x-longDescription: This defines the property name for the action.
      type: object
      x-longDescription: This defines the name of the custom action supported on this
        resource. If InitializeType is not specified in the request body, the InitializeType
        should be Fast.
    InitializeType:
      enum:
      - Fast
      - Slow
      type: string
      x-enumDescriptions:
        Fast: The volume is prepared for use quickly, typically by erasing just the
          beginning and end of the space so that partitioning can be performed.
        Slow: The volume is prepared for use slowly, typically by completely erasing
          the volume.
    Links:
      additionalProperties: false
      description: Add ability to manage spare capacity.
      properties:
        ClassOfService:
          $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/idRef
          description: The ClassOfService that this storage volume conforms to.
          nullable: true
          readOnly: true
          x-longDescription: This property shall contain a reference to the ClassOfService
            that this storage volume conforms to.
        DedicatedSpareDrives:
          description: An array of references to the drives which are dedicated spares
            for this volume.
          items:
            $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/idRef
          readOnly: true
          type: array
          x-longDescription: The value of this property shall be a reference to the
            resources that this volume is associated with and shall reference resources
            of type Drive. This property shall only contain references to Drive entities
            which are currently assigned as a dedicated spare and are able to support
            this Volume.
        DedicatedSpareDrives@odata.count:
          $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/count
        Drives:
          description: An array of references to the drives which contain this volume.
            This will reference Drives that either wholly or only partly contain this
            volume.
          items:
            $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/idRef
          readOnly: true
          type: array
          x-longDescription: The value of this property shall be a reference to the
            resources that this volume is associated with and shall reference resources
            of type Drive. This property shall only contain references to Drive entities
            which are currently members of the Volume, not hot spare Drives which
            are not currently a member of the volume.
        Drives@odata.count:
          $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/count
        Oem:
          $ref: http://redfish.dmtf.org/schemas/v1/Resource.yaml#/components/schemas/Oem
          description: Oem extension object.
          x-longDescription: This object represents the Oem property.  All values
            for resources described by this schema shall comply to the requirements
            as described in the Redfish specification.
        SpareResourceSets:
          description: An array of references to SpareResourceSets.
          items:
            $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/idRef
          readOnly: false
          type: array
          x-longDescription: Each referenced SpareResourceSet shall contain resources
            that may be utilized to replace the capacity provided by a failed resource
            having a compatible type.
        SpareResourceSets@odata.count:
          $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/count
      type: object
      x-patternProperties:
        ^([a-zA-Z_][a-zA-Z0-9_]*)?@(odata|Redfish|Message)\.[a-zA-Z_][a-zA-Z0-9_.]+$:
          description: This property shall specify a valid odata or Redfish property.
    OemActions:
      additionalProperties: true
      properties: {}
      type: object
      x-patternProperties:
        ^([a-zA-Z_][a-zA-Z0-9_]*)?@(odata|Redfish|Message)\.[a-zA-Z_][a-zA-Z0-9_.]+$:
          description: This property shall specify a valid odata or Redfish property.
    Operation:
      additionalProperties: false
      properties:
        AssociatedTask:
          $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/idRef
          description: A reference to the task associated with the operation if any.
          readOnly: true
        OperationName:
          description: The name of the operation.
          nullable: true
          readOnly: true
          type: string
        PercentageComplete:
          description: The percentage of the operation that has been completed.
          nullable: true
          readOnly: true
          type: integer
      type: object
      x-patternProperties:
        ^([a-zA-Z_][a-zA-Z0-9_]*)?@(odata|Redfish|Message)\.[a-zA-Z_][a-zA-Z0-9_.]+$:
          description: This property shall specify a valid odata or Redfish property.
    RAIDType:
      enum:
      - RAID0
      - RAID1
      - RAID3
      - RAID4
      - RAID5
      - RAID6
      - RAID10
      - RAID01
      - RAID6TP
      - RAID1E
      - RAID50
      - RAID60
      - RAID00
      - RAID10E
      - RAID1Triple
      - RAID10Triple
      type: string
      x-enumDescriptions:
        RAID0: A placement policy where consecutive logical blocks of data are uniformly
          distributed across a set of independent storage devices without offering
          any form of redundancy.
        RAID00: A placement policy that creates a RAID 0 stripe set over two or more
          RAID 0 sets.
        RAID01: A data placement policy that creates a mirrored device (RAID 1) over
          a set of striped devices (RAID 0).
        RAID1: A placement policy where each logical block of data is stored on more
          than one independent storage device.
        RAID10: A placement policy that creates a striped device (RAID 0) over a set
          of mirrored devices (RAID 1).
        RAID10E: A placement policy that uses a RAID 0 stripe set over two or more
          RAID 10 sets.
        RAID10Triple: A placement policy that uses a striped device (RAID 0) over
          a set of triple mirrored devices (RAID 1Triple).
        RAID1E: A placement policy that uses a form of mirroring implemented over
          a set of independent storage devices where logical blocks are duplicated
          on a pair of independent storage devices so that data is uniformly distributed
          across the storage devices.
        RAID1Triple: A placement policy where each logical block of data is mirrored
          three times across a set of three independent storage devices.
        RAID3: A placement policy using parity-based protection where logical bytes
          of data are uniformly distributed across a set of independent storage devices
          and where the parity is stored on a dedicated independent storage device.
        RAID4: A placement policy using parity-based protection where logical blocks
          of data are uniformly distributed across a set of independent storage devices
          and where the parity is stored on a dedicated independent storage device.
        RAID5: A placement policy using parity-based protection for storing stripes
          of 'n' logical blocks of data and one logical block of parity across a set
          of 'n+1' independent storage devices where the parity and data blocks are
          interleaved across the storage devices.
        RAID50: A placement policy that uses a RAID 0 stripe set over two or more
          RAID 5 sets of independent storage devices.
        RAID6: A placement policy using parity-based protection for storing stripes
          of 'n' logical blocks of data and two logical blocks of independent parity
          across a set of 'n+2' independent storage devices where the parity and data
          blocks are interleaved across the storage devices.
        RAID60: A placement policy that uses a RAID 0 stripe set over two or more
          RAID 6 sets of independent storage devices.
        RAID6TP: A placement policy that uses parity-based protection for storing
          stripes of 'n' logical blocks of data and three logical blocks of independent
          parity across a set of 'n+3' independent storage devices where the parity
          and data blocks are interleaved across the storage devices. This is commonly
          referred to as Triple Parity RAID. Data stored using this form of RAID is
          able to survive any three independent storage device failures without data
          loss.
      x-enumLongDescriptions:
        RAID0: A placement policy where consecutive logical blocks of data are uniformly
          distributed across a set of independent storage devices without offering
          any form of redundancy. This is commonly referred to as data striping. This
          form of RAID will encounter data loss with the failure of any storage device
          in the set.
        RAID00: A placement policy that creates a RAID 0 stripe set over two or more
          RAID 0 sets. This is commonly referred to as RAID 0+0. This form of data
          layout is not fault tolerant; if any storage device fails there will be
          data loss.
        RAID01: A data placement policy that creates a mirrored device (RAID 1) over
          a set of striped devices (RAID 0). This is commonly referred to as RAID
          0+1 or RAID 0/1. Data stored using this form of RAID is able to survive
          a single RAID 0 data set failure without data loss.
        RAID1: A placement policy where each logical block of data is stored on more
          than one independent storage device. This is commonly referred to as mirroring.
          Data stored using this form of RAID is able to survive a single storage
          device failure without data loss.
        RAID10: A placement policy that creates a striped device (RAID 0) over a set
          of mirrored devices (RAID 1). This is commonly referred to as RAID 1/0.
          Data stored using this form of RAID is able to survive storage device failures
          in each RAID 1 set without data loss.
        RAID10E: A placement policy that uses a RAID 0 stripe set over two or more
          RAID 10 sets. This is commonly referred to as Enhanced RAID 10. Data stored
          using this form of RAID is able to survive a single device failure within
          each nested RAID 1 set without data loss.
        RAID10Triple: 'A placement policy that uses a striped device (RAID 0) over
          a set of triple mirrored devices (RAID 1Triple). This form of RAID can survive
          up to two failures in each triple mirror set without data loss. '
        RAID1E: A placement policy that uses a form of mirroring implemented over
          a set of independent storage devices where logical blocks are duplicated
          on a pair of independent storage devices so that data is uniformly distributed
          across the storage devices. This is commonly referred to as RAID 1 Enhanced.
          Data stored using this form of RAID is able to survive a single storage
          device failure without data loss.
        RAID1Triple: A placement policy where each logical block of data is mirrored
          three times across a set of three independent storage devices. This is commonly
          referred to as three-way mirroring. This form of RAID can survive two device
          failures without data loss.
        RAID3: A placement policy using parity-based protection where logical bytes
          of data are uniformly distributed across a set of independent storage devices
          and where the parity is stored on a dedicated independent storage device.
          Data stored using this form of RAID is able to survive a single storage
          device failure without data loss. If the storage devices use rotating media,
          they are assumed to be rotationally synchronized, and the data stripe size
          should be no larger than the exported block size.
        RAID4: A placement policy using parity-based protection where logical blocks
          of data are uniformly distributed across a set of independent storage devices
          and where the parity is stored on a dedicated independent storage device.
          Data stored using this form of RAID is able to survive a single storage
          device failure without data loss.
        RAID5: A placement policy using parity-based protection for storing stripes
          of 'n' logical blocks of data and one logical block of parity across a set
          of 'n+1' independent storage devices where the parity and data blocks are
          interleaved across the storage devices. Data stored using this form of RAID
          is able to survive a single storage device failure without data loss.
        RAID50: A placement policy that uses a RAID 0 stripe set over two or more
          RAID 5 sets of independent storage devices. Data stored using this form
          of RAID is able to survive a single storage device failure within each RAID
          5 set without data loss.
        RAID6: A placement policy using parity-based protection for storing stripes
          of 'n' logical blocks of data and two logical blocks of independent parity
          across a set of 'n+2' independent storage devices where the parity and data
          blocks are interleaved across the storage devices. Data stored using this
          form of RAID is able to survive any two independent storage device failures
          without data loss.
        RAID60: A placement policy that uses a RAID 0 stripe set over two or more
          RAID 6 sets of independent storage devices. Data stored using this form
          of RAID is able to survive two device failures within each RAID 6 set without
          data loss.
    Volume:
      additionalProperties: false
      description: Volume contains properties used to describe a volume, virtual disk,
        LUN, or other logical storage entity for any system.
      properties:
        '@odata.context':
          $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/context
        '@odata.etag':
          $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/etag
        '@odata.id':
          $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/id
        '@odata.type':
          $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/type
        AccessCapabilities:
          description: Supported IO access capabilities.
          items:
            $ref: http://redfish.dmtf.org/schemas/swordfish/v1/DataStorageLoSCapabilities.yaml#/components/schemas/StorageAccessCapability
            nullable: true
          readOnly: false
          type: array
          x-longDescription: Each entry shall specify a current storage access capability.
        Actions:
          $ref: '#/components/schemas/Actions'
          description: The available actions for this resource.
          x-longDescription: The Actions property shall contain the available actions
            for this resource.
        AllocatedPools:
          $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/idRef
          description: An array of references to StoragePools allocated from this
            Volume.
          nullable: true
          readOnly: true
          x-longDescription: The value of this property shall contain references to
            all storage pools allocated from this volume.
        BlockSizeBytes:
          description: The size of the smallest addressable unit (Block) of this volume
            in bytes.
          nullable: true
          readOnly: true
          type: integer
          x-longDescription: This property shall contain size of the smallest addressable
            unit of the associated volume.
          x-units: By
        Capacity:
          $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/idRef
          description: Capacity utilization.
          nullable: true
          readOnly: false
          x-longDescription: Information about the utilization of capacity allocated
            to this storage volume.
        CapacityBytes:
          description: The size in bytes of this Volume.
          nullable: true
          readOnly: true
          type: integer
          x-longDescription: This property shall contain the size in bytes of the
            associated volume.
          x-units: By
        CapacitySources:
          description: An array of space allocations to this volume.
          items:
            $ref: http://redfish.dmtf.org/schemas/swordfish/v1/Capacity.yaml#/components/schemas/CapacitySource
          readOnly: false
          type: array
          x-longDescription: Fully or partially consumed storage from a source resource.
            Each entry provides capacity allocation information from a named source
            resource.
        CapacitySources@odata.count:
          $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/count
        Description:
          $ref: http://redfish.dmtf.org/schemas/v1/Resource.yaml#/components/schemas/Description
          nullable: true
          readOnly: true
        Encrypted:
          description: Is this Volume encrypted.
          nullable: true
          readOnly: false
          type: boolean
          x-longDescription: This property shall contain a boolean indicator if the
            Volume is currently utilizing encryption or not.
        EncryptionTypes:
          description: The types of encryption used by this Volume.
          items:
            $ref: '#/components/schemas/EncryptionTypes'
          readOnly: false
          type: array
          x-longDescription: This property shall contain the types of encryption used
            by this Volume.
        IOStatistics:
          $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/idRef
          description: Statistics for this volume.
          nullable: true
          x-longDescription: The value shall represent IO statistics for this volume.
        Id:
          $ref: http://redfish.dmtf.org/schemas/v1/Resource.yaml#/components/schemas/Id
          readOnly: true
        Identifiers:
          description: The Durable names for the volume.
          items:
            $ref: http://redfish.dmtf.org/schemas/v1/Resource.yaml#/components/schemas/Identifier
          type: array
          x-longDescription: This property shall contain a list of all known durable
            names for the associated volume.
        Links:
          $ref: '#/components/schemas/Links'
          description: Contains references to other resources that are related to
            this resource.
          x-longDescription: The Links property, as described by the Redfish Specification,
            shall contain references to resources that are related to, but not contained
            by (subordinate to), this resource.
        LowSpaceWarningThresholdPercents:
          description: Low space warning.
          items:
            nullable: true
            type: integer
          readOnly: false
          type: array
          x-longDescription: 'Each time the following value is less than one of the
            values in the array the LOW_SPACE_THRESHOLD_WARNING event shall be triggered:
            Across all CapacitySources entries, percent = (SUM(AllocatedBytes) - SUM(ConsumedBytes))/SUM(AllocatedBytes).'
          x-units: '%'
        Manufacturer:
          description: The manufacturer or OEM of this storage volume.
          nullable: true
          readOnly: true
          type: string
          x-longDescription: This property shall contain a value that represents the
            manufacturer or implementer of the storage volume.
        MaxBlockSizeBytes:
          description: Max Block size in bytes.
          nullable: true
          readOnly: true
          type: integer
          x-longDescription: This property shall contain size of the largest addressable
            unit of this storage volume.
          x-units: By
        Model:
          description: The model number for this storage volume.
          nullable: true
          readOnly: true
          type: string
          x-longDescription: The value is assigned by the manufacturer and shall represents
            a specific storage volume implementation.
        Name:
          $ref: http://redfish.dmtf.org/schemas/v1/Resource.yaml#/components/schemas/Name
          readOnly: true
        Oem:
          $ref: http://redfish.dmtf.org/schemas/v1/Resource.yaml#/components/schemas/Oem
          description: This is the manufacturer/provider specific extension moniker
            used to divide the Oem object into sections.
          x-longDescription: The value of this string shall be of the format for the
            reserved word *Oem*.
        Operations:
          description: The operations currently running on the Volume.
          items:
            $ref: '#/components/schemas/Operation'
          type: array
          x-longDescription: This property shall contain a list of all currently running
            on the Volume.
        OptimumIOSizeBytes:
          description: The size in bytes of this Volume's optimum IO size.
          nullable: true
          readOnly: true
          type: integer
          x-longDescription: This property shall contain the optimum IO size to use
            when performing IO on this volume. For logical disks, this is the stripe
            size. For physical disks, this describes the physical sector size.
          x-units: By
        RecoverableCapacitySourceCount:
          description: Current number of capacity source resources that are available
            as replacements.
          nullable: true
          readOnly: false
          type: integer
          x-longDescription: The value is the number of available capacity source
            resources currently available in the event that an equivalent capacity
            source resource fails.
        RemainingCapacityPercent:
          description: The percentage of the capacity remaining in the StoragePool.
          nullable: true
          readOnly: true
          type: integer
          x-longDescription: If present, this value shall return  {[(SUM(AllocatedBytes)
            - SUM(ConsumedBytes)]/SUM(AllocatedBytes)}*100 represented as an integer
            value.
        ReplicaInfo:
          $ref: http://redfish.dmtf.org/schemas/swordfish/v1/StorageReplicaInfo.yaml#/components/schemas/ReplicaInfo
          description: Describes this storage volume in its role as a target replica.
          nullable: true
          readOnly: true
          x-longDescription: This property shall describe the replica relationship
            between this storage volume and a corresponding source volume.
        ReplicaTargets:
          description: The resources that are target replicas of this source.
          items:
            $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/idRef
          readOnly: true
          type: array
          x-longDescription: The value shall reference the target replicas that are
            sourced by this replica.
        ReplicaTargets@odata.count:
          $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/count
        Status:
          $ref: http://redfish.dmtf.org/schemas/v1/Resource.yaml#/components/schemas/Status
        StorageGroups:
          $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/idRef
          description: An array of references to Storage Groups that includes this
            volume.
          nullable: true
          readOnly: true
          x-longDescription: The value of this property shall contain references to
            all storage groups that include this volume.
        VolumeType:
          $ref: '#/components/schemas/VolumeType'
          deprecated: true
          description: The type of this volume.
          nullable: true
          readOnly: true
          x-deprecatedReason: Deprecated in favor of explicit use of RAIDType.
          x-longDescription: This property shall contain the type of the associated
            Volume.
      required:
      - '@odata.id'
      - '@odata.type'
      - Id
      - Name
      type: object
      x-longDescription: This resource shall be used to represent a volume, virtual
        disk, logical disk, LUN, or other logical storage for a Redfish implementation.
      x-patternProperties:
        ^([a-zA-Z_][a-zA-Z0-9_]*)?@(odata|Redfish|Message)\.[a-zA-Z_][a-zA-Z0-9_.]+$:
          description: This property shall specify a valid odata or Redfish property.
    VolumeType:
      enum:
      - RawDevice
      - NonRedundant
      - Mirrored
      - StripedWithParity
      - SpannedMirrors
      - SpannedStripesWithParity
      type: string
      x-enumDescriptions:
        Mirrored: The volume is a mirrored device.
        NonRedundant: The volume is a non-redundant storage device.
        RawDevice: The volume is a raw physical device without any RAID or other virtualization
          applied.
        SpannedMirrors: The volume is a spanned set of mirrored devices.
        SpannedStripesWithParity: The volume is a spanned set of devices which uses
          parity to retain redundant information.
        StripedWithParity: The volume is a device which uses parity to retain redundant
          information.
title: '#Volume.v1_3_0.Volume'
x-copyright: Copyright 2016-2018 Storage Networking Industry Association (SNIA), USA.
  All rights reserved. For the full SNIA copyright policy, see http://www.snia.org/about/corporate_info/copyright
x-owningEntity: SNIA
